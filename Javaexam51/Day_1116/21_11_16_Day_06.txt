Exam_01

/*
 *  1  2  3  4  5
 *  10 9  8  7  6
 *  11 12 13 14 15
 *  20 19 18 17 16
 *  21 22 23 24 25
 */

콘솔화면에서 출력은 위에서부터 아래로, 왼쪽에서 오른쪽으로 이루어진다

각 행에 시작하는 숫자를 보면
+1 +9 가 반복되는 규칙이 있으므로 이를 이용


Exam_02

자료형
 1) 기본자료형 : 실제 값을 저장 (8가지)
 2) 참조형 : 실제 값이 저장되는 주소를 저장 (배열, 클래스, 인터페이스 등)


배열 (Array) : 선형구조, 같은 자료형
기본자료형이 단독주택이라면, 배열은 아파트
이름(변수명)은 같은데 호수(인덱스)로 구분  a[인덱스]

선언 후 할당
선언 : 자료형과 배열의 이름을 알려줌 (참조형 변수를 생성) (초기값은 null로 하는게 좋음)
할당 : 실제로 공간을 만들고 그 주소(첫번째 요소의 주소)를 알려줌 (new 연산자 사용)
메모리의 기본 크기는 1Byte
메모리상의 주소는 16진수
참조변수는 배열의 첫번째 요소를 참조
new 연산자를 이용하여 생성시 해당 타입의 default 값으로 초기화
boolean	false
char	'\u0000'
int 	0
double	0.0
참조형	null

ArrayIndexOutOfBoundsException 은 Runtime Exception
->컴파일 단계에서 잡지못함
에러 메시지에는 어떠한 인덱스를 접근하려 하였는지가 표시됨

Error (에러)

Exception (예외)



Exam_03
배열 선언과 동시에 명시적 초기화
int arr[] = {1,2,3,4,5};
int arr2[] = new int[] {1,2,3,4,5}; // 이것과 동일하면 new int[] 가 생략된 형태

배열값 확인
1) Arrays.toString( 배열명 )
 => [ 값1, 값2, 값3 .. ]  리스트 방식

2) for 문 
for ( i=0; i<arr.length; i++ )  arr[i]

3) 확장 for 문 (향상된 for 문)
for ( val : arr)



Exam_04

/*
 * 5개의 정수를 입력 받아서 합, 평균을 구하여 출력
 * 입력 : 60
 * 입력 : 70
 * 입력 : 88
 * 입력 : 95
 * 입력 : 56
 * [출력예시]
 * 입력 값 : 60 70 88 95 56
 * 합계 : xxx
 * 평균 : xx
 */


Exam_05

import java.util.Scanner;

/*
 * 정수 7개를 입력 받아서 최대, 최소, 합계, 평균을 구하여 출력
 * [입력 예시]
 * 정수 1: 97
 * 정수 2: 55
 *   ..
 * 정수 7: 85
 * [출력 예시]
 * 입력자료 : 97 55 ... 85
 * 최대값 : xx
 * 최소값 : xx
 * 합계 : xxx
 * 평균 : xxx
 */


Exam_06
공유 : 둘 이상의 참조변수가 같은 것을 가리킴
복제 : 배열 데이터를 값까지 모두 복사


Exam_07
메서드 호출법 (메소드 호출법)
특정한 작업을 모듈화 해둠

호출시 메서드명(인자 - argument) // 호출 시 

받을때 메서드 명( 매개변수 - parameter) // 정의에서 나열되는 변수
메서드 내에서 사용한 변수는 메서드가 종료된 후 소멸

1) Call by Value : 실제 값을 복사하여 메서드를 호출, 원본에는 영향 x
2) Call by Reference : 공유를 통해 메서드를 호출, 원본에 영향이 생길 수 있음
                         => 원본을 복제하여 공유로 호출


* 배열
 - 적은 수의 데이터로 빠른 작업이 필요할 때 사용.
 - 프로그램 종료 시 데이터 소멸 => DB나 데이터입출력을 통해 저장
 - 같은 자료형(type)일 경우에만 사용가능